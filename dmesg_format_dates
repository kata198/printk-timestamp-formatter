#!/usr/bin/env python
#
# Copyright (c) 2015, 2016, 2017 Tim Savannah under LGPLv3. See LICENSE for more information.
# This application prints the kernel log (dmesg), converting the timestamps to local time or utc,
#  adjusting for drift between the time systems.
import errno
import sys
import subprocess
import traceback

import printk_timestamp_converter

defaultEncoding = sys.getdefaultencoding()
if bytes == str:
    # Python 2
    def tostr(x):
        if isinstance(x, unicode):
            return x.encode(defaultEncoding)
        else:
            return str(x)
else:
    # Python 3
    def tostr(x):
        if isinstance(x, bytes) is False:
            return str(x)
        return x.decode(defaultEncoding)

# TODO: Cleanup this printUsage, add other options
def printUsage():
    sys.stderr.write('''dmesg_format_dates (Options) - Formats kernel log (dmesg/kmsg), replacing the uptimes with timestamps, accounting for drift.
    
    
    The kernel logs messages with a timestamp of seconds since boot, which is an independent timesource from standard uptime and clocks, and often drifts by several seconds.

    This program takes account for adjusting time with those drifts. It will add a drift marker if one hasn't been added since a certain threshold (or use the printk_mark_drift program to explicitly add one).

    Timestamps are calculated using the drifts marked. The more you mark, the more accurate your timestamps will be.

    You may either run this program without providing input (in which it will call "dmesg"), or pipe in a kmsg log file/source.

       Options:

           --drift=N               Assume a fixed drift of N, instead of using (or adding) the drift markers.

           --no-warnings           Disable warnings being repeated on stdout at end of output (stdout).
                                     The warnings will still be output to stderr before any output on stdout

           --no-mark               Do not attempt to place a marker, even if a recent sample is not found.

       Output Formats (pick one):
       
           -l or --local           Output time on LOCAL format (DEFAULT).
           -u or --utc             Output time in UTC format.
           -e or --epoch           Output time in Unix Epoch format (seconds since Jan 1 1970 00:00:00)


    If your kernel log does not contain timestamps, run: echo "Y" > /sys/module/printk/parameters/time

''')

MODE_LOCAL = 0
MODE_UTC = 1
MODE_EPOCH = 2

pickedAMode = False

def err_tooManyModes():
    sys.stderr.write('You provided multiple modes (UTC, LOCAL, or EPOCH) as output format. Please pick one.\n')
    sys.exit(1)



def readAllData(stream):
    '''
        readAllData - Read all the data on a stream, waiting for eof to support incomplete streams

        @param stream - A stream

        @return - Data read off stream
    '''
    
    if sys.version_info.major == 2:
        POSSIBLE_EOFS = ('', u'')
    else:
        POSSIBLE_EOFS = ('', b'')
    
    isStreamClosed = lambda theStream : getattr(theStream, 'closed', False)

    if isStreamClosed(stream):
        return '' # Note, does not check the stream codec, but doesn't matter for this app

    retLst = []

    while True:
        
        nextContents = stream.read()

        if isStreamClosed(stream) or nextContents in POSSIBLE_EOFS:
            break
        
        retLst.append(nextContents)

    if not retLst:
        return ''

    # Ensure we join with the correct type
    return type(retLst[0])().join(retLst)


if __name__ == '__main__':
    mode = MODE_LOCAL

    args = sys.argv[1:]
    currentDrift = None
    drifts = {}

    shouldRepeatWarnings = True

    shouldMarkIfRequired = True

    # PARE ARGS
    for arg in args:
        if arg in ('-u', '--utc'):
            mode = MODE_UTC
            if pickedAMode is True:
                err_tooManyModes()
            pickedAMode = True
        elif arg in ('--local', '-l'):
            mode = MODE_LOCAL
            if pickedAMode is True:
                err_tooManyModes()
            pickedAMode = True
        elif arg in ('-e', '--epoch'):
            mode = MODE_EPOCH
        elif arg in ('--help', '-h', '-?'):
            printUsage()
            sys.exit(0)
        elif arg.startswith('--drift='):
            try:
                currentDrift = drifts['earliest'] = drifts['latest'] = int(arg[arg.index('=')+1:])
            except ValueError:
                sys.stderr.write('--drift takes an integer argument.\n')
                sys.exit(1)
        elif arg == '--no-warnings':
            shouldRepeatWarnings = False
        elif arg == '--no-mark':
            shouldMarkIfRequired = False

        else:
            sys.stderr.write('Unknown argument: %s\n\n' %(arg,))
            printUsage()
            sys.exit(1)


    # Yes these two can be combined, but "explicit better than implicit"

    funcArgs = []
    funcKwargs = {}

    if shouldMarkIfRequired:
        funcKwargs['markIfRequired'] = True
    else:
        funcKwargs['markIfRequired'] = False


    try:

        if not sys.stdin.isatty():
            # If we are reading from a terminal, collect the data

            contents = readAllData(sys.stdin)

            funcArgs.append(contents)
        else:
            pipe = subprocess.Popen('dmesg', shell=True, stdout=subprocess.PIPE)
            contents = tostr(readAllData(pipe.stdout))
            pipe.wait()
    except Exception as e:
        excInfo = sys.exc_info()
        sys.stderr.write('Error collecting dmesg data.\n%s:  %s\n\n' %( type(e).__name__, str(e)))
        traceback.print_exception(*excInfo)
        sys.exit( errno.EIO )

    warnings = []

    def addWarning(warn):
        warnings.append(warn)
        sys.stderr.write(warn)

    if currentDrift is None:
        # No drift provided, try to calculate it (and possibly mark if root and not pre-provided via stdin)
        try:
            drifts = printk_timestamp_converter.printk_calculateDrifts(*funcArgs, **funcKwargs)

        except printk_timestamp_converter.NotRecentEnoughDriftDelta as nre:
            # Failed to calculate drift because not root and no recent marker found

            # Try again to detect if ANY marker is present
            try:
                drifts = printk_timestamp_converter.printk_calculateDrifts(*funcArgs, **funcKwargs, maxDriftRedetectTime=0)

                addWarning('## WARNING: A "recent" drift was not detected (within %d seconds), but an older marker was found.\n')
                addWarning('## WARNING:  It is recommended that you re-run this command as root (if not parsing from a file),\n')
                addWarning('## WARNING:   or running `printk_mark_drift` command. See README/help for more info.\n\n')
            except printk_timestamp_converter.NotRecentEnoughDriftDelta as nre2:
                # Failed again. No marker present at all.
                #  SINCE VERSION 2.3 - ASSUME 0 AND WARN USER.

                currentDrift = drifts['earliest'] = drifts['latest'] = 0

                # Add the previous error message here, but convert to multiline and prefix with ## WARNING: 
                addWarning('## WARNING: %s\n\n' %(str(nre).replace('.', '.\n## WARNING: '), ))
                addWarning('## WARNING: No drift marker was detected in the dmesg log. This means the times will NOT\n')
                addWarning('## WARNING:   be accurate, as the drift with the system clock is not measured.\n')
                addWarning('## WARNING: Please see documentation for more info, rerun this command as root,\n')
                addWarning('## WARNING:   or run `printk_mark_drift` command often. See README/help for more info.\n\n')

            sys.stderr.flush()

            

    currentUptime = printk_timestamp_converter.getSystemUptime()

    # Convert to tuple here for array index performance
    contentsSplit = tuple(contents.split('\n'))

    # Get the selected timestamp output function
    if mode == MODE_EPOCH:
        getTimePortion = lambda _printkSeconds, _currentDrift : str(printk_timestamp_converter.printk_convertTimestampToEpoch(_printkSeconds, _currentDrift, currentUptime))
    elif mode == MODE_LOCAL:
        getTimePortion = lambda _printkSeconds, _currentDrift : printk_timestamp_converter.printk_convertTimestampToDatetime(_printkSeconds, _currentDrift, currentUptime).ctime()
    else:
        getTimePortion = lambda _printkSeconds, _currentDrift : printk_timestamp_converter.printk_convertTimestampToUTCDatetime(_printkSeconds, _currentDrift, currentUptime).ctime()

    if not contentsSplit[-1]:
        contentsSplit = contentsSplit[:-1]


    currentDrift = drifts['earliest']
    contentsSplitLen = len(contentsSplit)

    for lineNo in range(contentsSplitLen):

        line = contentsSplit[lineNo]

        # Check if we have reached the next
        if lineNo in drifts:
            currentDrift = drifts[lineNo]

        # Try to extract the timnestamp from this line
        matchObj = printk_timestamp_converter.PRINTK_WITH_TIME_PATTERN.match(line)
        if matchObj:
            # We matched a kernel clock at beginning of line, convert it to desired timestamp format
            #   taking into account drift
            printkSeconds = matchObj.groupdict()['printk_seconds']
            timePortion = getTimePortion(printkSeconds, currentDrift)
            
            try:   
                sys.stdout.write("[%s]%s\n" %(timePortion, line[line.index(']')+1:]) )
            except:
                break
        else:
            try:
                sys.stdout.write(line + "\n")
            except:
                break

    # Copy warnings to stdout
    if shouldRepeatWarnings and warnings:
        sys.stdout.write('\n')
        sys.stdout.write(''.join(warnings))

# vim: set sw=4 ts=4 st expandtab
