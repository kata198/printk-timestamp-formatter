#!/usr/bin/env python
#
# Copyright (c) 2015 Tim Savannah under LGPLv3. See LICENSE for more information.
# This application converts a single timestamp with current drift, and optionally adds another drift marker if outside threshold
import sys

import datetime
import subprocess
import time
import printk_timestamp_converter

MODE_LOCAL = 0
MODE_UTC = 1
MODE_TIMESTAMP = 2

# TODO: Add better usage
def printUsage():
    sys.stderr.write("printk_time_convert: Converts printk timestamps, which may be inaccurate, to human readable dates that are accurate.\n  Usage: printk_time_convert (options) [timestamp]\n")


if __name__ == '__main__':
    if '--help' in sys.argv or '-h' in sys.argv or '-?' in sys.argv:
        printUsage()
        sys.exit(0)

    if '-u' in sys.argv:
        mode = MODE_UTC
        sys.argv.remove('-u')
    elif '--utc' in sys.argv:
        mode = MODE_UTC
        sys.argv.remove('--utc')
    elif '-t' in sys.argv:
        mode = MODE_TIMESTAMP
        sys.argv.remove('-t')
    elif '--timestamp' in sys.argv:
        mode = MODE_TIMESTAMP
        sys.argv.remove('--timestamp')
    elif '-l' in sys.argv:
        mode = MODE_LOCAL
        sys.argv.remove('-l')
    elif '--local' in sys.argv:
        mode = MODE_LOCAL
        sys.argv.remove('--local')
    else:
        mode = MODE_LOCAL

            
    if len(sys.argv) != 2:
        printUsage()
        sys.exit(1)

    if mode == MODE_LOCAL:
        dateStr = printk_timestamp_converter.printk_convertTimestampToDatetime(sys.argv[1]).ctime()
    elif mode == MODE_UTC:
        dateStr = printk_timestamp_converter.printk_convertTimestampToUTCDatetime(sys.argv[1]).ctime()
    else: # MODE_TIMESTAMP
        dateStr = str(printk_timestamp_converter.printk_convertTimestampToEpoch(sys.argv[1]))
        
    sys.stdout.write(dateStr + '\n')
# vim: sw=4 ts=4 expandtab
